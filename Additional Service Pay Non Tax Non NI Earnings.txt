/*****************************************************************************

FORMULA NAME: ADDITIONAL_SERVICE_PAY_NON_TAX_NON_NI_EARN

FORMULA TYPE: Payroll

DESCRIPTION: 
This is the formula for processing a flat amount earning element. The formula 
assumes that the amounts and periodicity are available in element entries. 
For a Salary element, the Salary and Periodicity are available in  element entry, 
that is created by Oracle Fusion Compensation.
This formula is created by Global Earnings template.

Formula Results :

 l_value               Direct Result for Earnings Pay Value. 
 l_reduce              Direct Result for Earnings Reduce Regular Earnings.
 mesg                  Warning message will be issued for this assignment.

*******************************************************************************/

/* Database Item Defaults */

DEFAULT FOR amount                         is 0
DEFAULT FOR mesg                           is ' '
DEFAULT FOR ENTRY_LEVEL       IS 'AP'
DEFAULT FOR PAYROLL_PERIOD_TYPE IS ' '
DEFAULT FOR PAY_EARN_PERIOD_START  is '0001/01/01 00:00:00' (date)
DEFAULT FOR PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date)
DEFAULT FOR REDUCE_REGULAR_EARNINGS_ASG_RUN is 0
DEFAULT FOR REDUCE_REGULAR_EARNINGS_TRM_RUN IS 0
DEFAULT FOR GB_REDUCE_REGULAR_ABSENCE_EARNINGS_ASG_RUN is 0
DEFAULT FOR GB_REDUCE_REGULAR_ABSENCE_HOURS_ASG_RUN is 0
DEFAULT FOR ADDITIONAL_SERVICE_PAY_NON_TAX_NON_NI_SECONDARY_CLASSIFICATION IS ' '
DEFAULT FOR ASG_HR_ASG_ID    is 0
DEFAULT FOR TERM_HR_TERM_ID    is 0
DEFAULT FOR pay_value is 0
DEFAULT FOR ENTRY_CREATOR_TYPE IS ' '
DEFAULT FOR NET is 0
DEFAULT FOR PRORATION_METHOD IS 'X'
DEFAULT FOR PRORATE_START is '0001/01/01 00:00:00' (date)
DEFAULT FOR PRORATE_END is '0001/01/01 00:00:00' (date)
Default for ee_id            is 0
DEFAULT FOR Addl_Service_Pay_weeks_override IS 99
DEFAULT FOR PENSION_REDUNDANCY_SINGLE_CONTRIBUTION_AMOUNT_ASG_ENTRY_VALUE IS 0

/* Inputs  */
INPUTS ARE        amount (number),
                  periodicity (text),
                  reduce_regular (text),
                  pay_value(number),
                  new_guess(number),
                  additional_amount(number),  
                  guess(number),   
                  first_run(number),
                  net(number),
                  proration_method(text),
                  Addl_Service_Pay_weeks_override,
                  Redundancy_Calc_Date (date),
                  Intended_Redundancy_Date (date),
      prorate_start,
      prorate_end

if (net = 0 and net was defaulted) then (

l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN)Initializing the Flat Amount Earnings Formula')

l_amount           = amount
l_value            = 0
l_reduce           = 0
l_reduce_hours     = 0
l_reduce_abs       = 0
l_reduce_hours_abs = 0
l_reduce_abs_hours = 0
l_hours            = 0
l_actual_amount = 0
l_actual_start_date = '0001/01/01 00:00:00' (Date)
l_actual_end_date = '0001/01/01 00:00:00' (Date)


l_prorate_start = prorate_start
l_prorate_end = prorate_end

/*    Assigning the  Values to the local variables*/
l_actual_start_date = PAY_EARN_PERIOD_START
l_actual_end_date = PAY_EARN_PERIOD_END
l_secondary_classification = ADDITIONAL_SERVICE_PAY_NON_TAX_NON_NI_SECONDARY_CLASSIFICATION
l_source_periodicity = periodicity
l_target_periodicity = PAYROLL_PERIOD_TYPE
l_element_entry_id = 0
l_payroll_rel_action_id = 0


/* Key Variable values retrival*/
l_element_entry_id       = GET_CONTEXT(ELEMENT_ENTRY_ID, 0)

l_payroll_rel_action_id  = GET_CONTEXT(PAYROLL_REL_ACTION_ID, 0)

 IF l_payroll_rel_action_id = 0 THEN
(
   l_msg      = GET_MESG('HRX','HRX_USETE_CONTEXT_NOT_SET','CONTEXT','PAYROLL_REL_ACTION_ID')
   l_dummy = PAY_LOG_ERROR(l_msg)
/*   dummy = 1 */
   /* Formula must error out at this point */
)

/* avoid unnecessary conversion to Workhour Workday*/
IF ( l_source_periodicity = 'ORA_WORKHOUR') THEN
   (
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) set source periodicity Workhour')
    l_source_periodicity = 'Workhour'  
   )
ELSE IF ( l_source_periodicity = 'ORA_DAILY') THEN   (       
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) set source periodicity Workday')
    l_source_periodicity = 'Workday'     
   ) 
ELSE IF ( l_source_periodicity = 'ORA_WEEKDAY') THEN   (       
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) set source periodicity Workday')
    l_source_periodicity = 'Workday'
   )

IF l_element_entry_id = 0 THEN
(
   l_msg      = GET_MESG('HRX','HRX_USETE_CONTEXT_NOT_SET','CONTEXT','ELEMENT_ENTRY_ID')
   l_dummy = PAY_LOG_ERROR(l_msg)
/*   dummy = 1 */
   /* Formula must error out at this point */
)

 if (proration_method was not defaulted) then (
    ee_id = GET_CONTEXT(ELEMENT_ENTRY_ID,0)
    IF ee_id = 0 THEN
      (
        log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) - Element Entry Id context not set')
        mesg = 'Element Entry Id context is not set.'
        Return mesg
      )
  IF (WSA_EXISTS('proration_method','TEXT_NUMBER')) THEN
   (
    log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) - Array found for proration_method')
    wsa_proration_method = WSA_GET('proration_method', EMPTY_TEXT_NUMBER)
   )
  wsa_proration_method[ee_Id] = proration_method
  WSA_SET('proration_method',wsa_proration_method)
)

/* If pay value is already set, no further processing required for pay value */
IF (pay_value = 0 and pay_value was defaulted ) THEN
(
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) l_source_periodicity :'||l_source_periodicity)

    /*************************************************************************
    Get the hours worked from Core HR Work Schedule. Call to per_availability_details.get_schedule_duration 
    to get the actual number of Hours Worked

               Parameters to be passed : -
               p_resource_id => Assignment Id or Term Id
               p_resource_type default 'ASSIGN' or TERM
               p_period_start   Period Start
               p_period_end     Period End
               p_use_sch_asg  DEFAULT 'Y'
               p_use_sch_inh   DEFAULT 'Y'
               p_include_noshift DEFAULT 'N'
               p_include_calevents IN CHAR DEFAULT 'Y'
               p_calc_units        IN CHAR DEFAULT 'H'
    ***********************************************************************/
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) ENTRY LEVEL IS ' ||ENTRY_LEVEL)
    
     l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) GETPAY BEFORE CALL ')
      SET_INPUT('ACTUAL_START_DATE',l_actual_start_date)
      SET_INPUT('ACTUAL_END_DATE',l_actual_end_date)
      SET_INPUT('UNIT_TYPE','H')
      SET_INPUT('ENTRY_LEVEL', entry_level)
    IF ( ENTRY_LEVEL = 'AP') THEN
       (
        l_term_assignment_id = TERM_HR_TERM_ID 
        SET_INPUT('HR_ASSIGN_ID',l_term_assignment_id)      
       )
    ELSE IF ( ENTRY_LEVEL = 'PA') THEN   (       
           l_term_assignment_id = ASG_HR_ASG_ID
           SET_INPUT('HR_ASSIGN_ID',l_term_assignment_id)        
       )   

      EXECUTE('GET_PAY_AVAILABILITY')

     l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) GETPAY Executed ')

     l_hours = GET_OUTPUT('L_UNITS',0)
     
     /* Setting the inputs for Rate Convertor */
     IF (l_source_periodicity <>  'Hourly') THEN
     (
        IF (l_source_periodicity = 'PRD') THEN
         (
            CALL_FORMULA('TES_GET_HR_DETAILS',
                        ASG_HR_ASG_ID     > 'HR_ASSIGN_ID',
                        TERM_HR_TERM_ID     > 'HR_TRM_ID',
                        Redundancy_Calc_Date > 'HR_EFFECTIVE_DATE',
                        'AP'         > 'HR_ENTRY_LEVEL',
                        l_start_date < 'L_PER_ASG_START_DATE' DEFAULT '0001/01/01 00:00:00'(date))

            CALL_FORMULA('TES_GET_HR_DETAILS',
                        ASG_HR_ASG_ID     > 'HR_ASSIGN_ID',
                        TERM_HR_TERM_ID     > 'HR_TRM_ID',
                        Intended_Redundancy_Date > 'HR_EFFECTIVE_DATE', /* l_termination_date, replaced by the Intended Redundancy Date */
                        'AP'         > 'HR_ENTRY_LEVEL',
                        l_per_asg_age < 'L_PER_ASG_PERSON_AGE' DEFAULT 0,
                        l_per_asg_length_of_service_by_seniority < 'L_PER_ASG_LENGTH_OF_SERVICE_BY_SENIORITY' DEFAULT 0)

            CALL_FORMULA('TES_AVERAGE_WEEKLY_RATE'
                        ,Redundancy_Calc_Date > 'in_effective_date' /* This will be overridden by Maternity Start Date if Applicable */
                        ,Redundancy_Calc_Date > 'in_contractual_date'
                        ,'SRP'               > 'rate_type'
                        ,out_week            < 'out_week' DEFAULT 0
                        ,l_average_rate      < 'l_average_weekly_rate' DEFAULT 0
                        ,l_contractual_rate  < 'l_contractual_weekly_rate' DEFAULT 0
                        ,l_entitlement_rate  < 'l_entitlement_weekly_rate' DEFAULT 0)

            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] out_week :'||TO_CHAR(out_week))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_average_rate :'||TO_CHAR(l_average_rate))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_contractual_rate :'||TO_CHAR(l_contractual_rate))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_entitlement_rate :'||TO_CHAR(l_entitlement_rate))               
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_per_asg_length_of_service_by_seniority :'||TO_CHAR(l_per_asg_length_of_service_by_seniority))               

            /* Work out length of service in year from Termination Date
            Could do this using function from Absence possibly when they create it :-) */

            l_los_months = TRUNC(l_per_asg_length_of_service_by_seniority * 12)
            l_los = LEAST(TRUNC(l_per_asg_length_of_service_by_seniority), 20)
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_los :'||TO_CHAR(l_los))               
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_los_months :'||TO_CHAR(l_los_months))               

            /* Calculate the Statutory Redundancy Pay */
            /* look up age (as of redundancy date) and los in table to identify number of weeks to pay */
            l_age = l_per_asg_age
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_age :'||TO_CHAR(l_age))               

            IF l_los >= 2 THEN
            (
                IF l_age < 22 THEN
                    l_srp = 0.5 * l_los
                ELSE IF l_age < 41 THEN
                    l_srp = 1 * l_los
                ELSE IF l_age < 99 THEN
                    l_srp = 1.5 * l_los
                        
                l_srp_limit = 479
                l_srp = l_srp * LEAST(l_entitlement_rate, l_srp_limit)
            )
            ELSE
                l_srp = 0
            
            /* Work out Additional Redundancy Pay based on length of service */
            /* Need to pass in a rate type if possible, also for ASP need to identify when a value is affected by Sickness and then not count, also not to continue if not 12 weeks avaialble */
            CALL_FORMULA('TES_AVERAGE_WEEKLY_RATE'
                        ,Redundancy_Calc_Date > 'in_effective_date' /* This will be overridden by Maternity Start Date if Applicable */
                        ,Redundancy_Calc_Date > 'in_contractual_date'
                        ,'ASP'               > 'rate_type'
                        ,out_week            < 'out_week' DEFAULT 0
                        ,l_average_rate      < 'l_average_weekly_rate' DEFAULT 0
                        ,l_contractual_rate  < 'l_contractual_weekly_rate' DEFAULT 0
                        ,l_entitlement_rate  < 'l_entitlement_weekly_rate' DEFAULT 0)

            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] out_week :'||TO_CHAR(out_week))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_average_rate :'||TO_CHAR(l_average_rate))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_contractual_rate :'||TO_CHAR(l_contractual_rate))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_entitlement_rate :'||TO_CHAR(l_entitlement_rate))               

            l_asp = to_num(get_table_value ( 'TES_ADDITIONAL_SERVICE_PAY_RATES', 'Weeks', TO_CHAR(l_los_months), '0'))
            l_asp = LEAST(Addl_Service_Pay_weeks_override, l_asp)
            l_asp = l_asp * l_entitlement_rate
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_asp :'||TO_CHAR(l_asp))
                                        
            /* Start with identifying if there has been any other payment (SMART Single Contribution)
               if there has then this needs to reduce the amount of asp paid */
            l_asp = l_asp - PENSION_REDUNDANCY_SINGLE_CONTRIBUTION_AMOUNT_ASG_ENTRY_VALUE
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] reduced asp (if at all) due to SMART Single :'||TO_CHAR(l_asp))

            /* Now separate out the 30,000 limit if applicable */
            l_nt_limit    = 30000 - l_srp
            l_asp_taxable = GREATEST(0, (l_asp - l_nt_limit))
            l_asp         = LEAST(l_asp, l_nt_limit)

            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_srp :'||TO_CHAR(l_srp))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_asp :'||TO_CHAR(l_asp))                                        
            l_log = PAY_INTERNAL_LOG_WRITE('[TESCO] l_asp_tax :'||TO_CHAR(l_asp_taxable))                                        

          )
         else
         ( 
           l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Amount : '||TO_CHAR(l_amount))
           l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN)Source Periodicity  : '||l_source_periodicity)
           l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN)Target periodicity  : '||l_target_periodicity)
           l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Parameter Initialization for Rate Converter Call')
  
            SET_INPUT('SOURCE_AMOUNT',l_amount)
            SET_INPUT('SOURCE_PERIODICITY',l_source_periodicity)
            SET_INPUT('TARGET_PERIODICITY',l_target_periodicity)
  
            EXECUTE('RATE_CONVERTER')
  
           l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Rate Converter Executed ')
  
           l_value = GET_OUTPUT('TARGET_AMOUNT',0)
  
          l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Target amount Returned')
          l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Target amount :'||TO_CHAR(l_actual_amount))
          /*End of Setting Inputs for Rate Convertor*/
        )
 )
 Else
 (
   
    l_value =l_amount * l_hours

 )
)   /* for IF of pay_value = 0 */
else
(
l_value = pay_value
)
l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Value : '||TO_CHAR(l_value))
l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) l_hours : '||TO_CHAR(l_hours))

   
  /* Reduce Regular earnings due to Absence payments - Processing begins */
   IF (ENTRY_CREATOR_TYPE = 'SP') THEN
   ( 
      

      l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) GB_REDUCE_REGULAR_ABSENCE_EARNINGS_ASG_RUN entered: ')
    /* Use the appropriate balance based on the employment level for the given element.*/
    IF ( ENTRY_LEVEL = 'PA') THEN
     (
       l_reduce_abs_hours = GB_REDUCE_REGULAR_ABSENCE_HOURS_ASG_RUN
       l_reduce_abs = GB_REDUCE_REGULAR_ABSENCE_EARNINGS_ASG_RUN
     )
     l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Reduce_abs ='||to_char(l_reduce_abs))
     l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Reduce _abs hours='||to_char(l_reduce_abs_hours))
   
   
/* Check prorate start date and prorate end date to decide if there is a proration event. If there is a event,  Reduce regular will be processed in the proration formula and will be skipped in base formula */
    IF (prorate_start was not defaulted or prorate_end was not defaulted) then
    (
       l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) This Element have proration, Reduce Regular moved to Proration Formula')
   /* Preparing Key for Absence Reduce Earnings and Absence Reduce Hours */

    GLB_ABS_EARN_REDUCE_KEY = ENTRY_LEVEL||'-'||TO_CHAR(l_element_entry_id)||'-'|| TO_CHAR(l_payroll_rel_action_id)||'_ABSENCE'
    l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_ABS_EARN_REDUCE_KEY '||GLB_ABS_EARN_REDUCE_KEY)

    GLB_ABS_EARN_REDUCE_EARNING_KEY = 'EARNING_'||GLB_ABS_EARN_REDUCE_KEY
    l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_ABS_EARN_REDUCE_EARNING_KEY ' ||GLB_ABS_EARN_REDUCE_EARNING_KEY)
    
       GLB_ABS_EARN_REDUCE_EARNING_HOURS_KEY = 'HOUR_'||GLB_ABS_EARN_REDUCE_KEY
    l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_ABS_EARN_REDUCE_EARNING_HOURS_KEY ' ||GLB_ABS_EARN_REDUCE_EARNING_HOURS_KEY)

    /* Setting Payvalue and hours in WSA*/
    WSA_SET(GLB_ABS_EARN_REDUCE_EARNING_KEY,l_reduce_abs)

    WSA_SET(GLB_ABS_EARN_REDUCE_EARNING_HOURS_KEY,l_reduce_abs_hours)
     

      )
    else
     (
       
      If l_reduce_abs_hours <= l_hours Then
       (
      l_hours = l_hours - l_reduce_abs_hours
       )
       Else
       (
      l_reduce_abs_hours = l_hours
      l_hours = 0
      /* mesg = 'Insufficient hours to reduce for Absence hours' */
      mesg = GET_MESG('PAY','PAY_RED_REG_LIMIT')
      l_log = PAY_LOG_ERROR('PAY:PAY_RED_REG_LIMIT')
       )
     If l_reduce_abs <= l_value then
     (
       l_value = l_value - l_reduce_abs
      )
      Else
      (
        l_reduce_abs = l_value
        l_value = 0
        /* mesg = 'Insufficient earnings to reduce for Absence Payment' */
        mesg = GET_MESG('PAY','PAY_RED_REG_LIMIT')
        l_log = PAY_LOG_ERROR('PAY:PAY_RED_REG_LIMIT')
      )
    )
    )
   /* Reduce Regular Absences processing ends */

  /* Reduce Regular earnings by Vacation element (created using a earning classfication) */

  /****************************************************************************  
  This logic will be executed when the employee's regular salary needs
  to be reduced. For example, this may happen when employee might have taken
  Vacation Pay or Sick Pay and it reduces the regular salary. 
  The regular salary element being reduced, is created via Compensation and in addition 
  it's secondary classification cannot be REGULAR_NOT_WORKED, for 
  the formula to pick up for reducing it. The vacation element(reducing element) is typically
  Units X Rate earning element. Reducing due to Absences element is covered below this section. 
  ****************************************************************************/

    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) REDUCE_REGULAR_EARNINGS_ASG_RUN before: ')
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Secondary classification = ' || l_secondary_classification )
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) creator_type  = ' || ENTRY_CREATOR_TYPE )
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Reduce Regular Calculation Begins')

   IF (l_secondary_classification <> 'Standard Earnings Regular Not Worked' AND ENTRY_CREATOR_TYPE = 'SP') THEN
   ( 
     l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) REDUCE_REGULAR_EARNINGS_ASG_RUN entered: ')
   /* Use the appropriate balance based on the employment level for the given element.*/
   IF ( ENTRY_LEVEL = 'PA') THEN
    (
      l_reduce_hours = REDUCE_REGULAR_HOURS_ASG_RUN
      l_reduce = REDUCE_REGULAR_EARNINGS_ASG_RUN
    )
   ELSE IF ( ENTRY_LEVEL = 'AP') THEN
    (
      l_reduce_hours = REDUCE_REGULAR_HOURS_TRM_RUN
      l_reduce = REDUCE_REGULAR_EARNINGS_TRM_RUN
    )
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Reduce ='||to_char(l_reduce))
    l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Reduce hours='||to_char(l_reduce_hours))
  /* Check prorate start date and prorate end date to decide if there is a proration event. If there is a event,  Reduce regular will be processed in the proration formula and will be skipped in base formula */
     IF (prorate_start was not defaulted or prorate_end was not defaulted) then
    (
       l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) This Element have proration, Reduce Regular moved to Proration Formula')
    /* Preparing Key for Reduce Earnings and Hours */

   GLB_EARN_REDUCE_KEY = ENTRY_LEVEL||'-'||TO_CHAR(l_element_entry_id)||'-'|| TO_CHAR(l_payroll_rel_action_id)
   l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_EARN_REDUCE_KEY '||GLB_EARN_REDUCE_KEY)

   GLB_EARN_REDUCE_EARNING_KEY = 'EARNING_'||GLB_EARN_REDUCE_KEY
   l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_EARN_REDUCE_EARNING_KEY ' ||GLB_EARN_REDUCE_EARNING_KEY)

   GLB_EARN_REDUCE_HOURS_KEY = 'HOUR_'|| GLB_EARN_REDUCE_KEY
   l_dummy =PAY_INTERNAL_LOG_WRITE('(GLBEARN) GLB_EARN_REDUCE_HOURS_KEY ' ||GLB_EARN_REDUCE_HOURS_KEY)

   /* Setting Payvalue and hours in WSA*/
   WSA_SET(GLB_EARN_REDUCE_EARNING_KEY,l_reduce)
   WSA_SET(GLB_EARN_REDUCE_HOURS_KEY,l_reduce_hours)
 

      )
    else
     (
      If l_reduce_hours <= l_hours Then
       (
      l_hours = l_hours - l_reduce_hours
       )
       Else
       (
       l_reduce_hours = l_hours
       l_hours = 0
       /* mesg = 'Insufficient hours to reduce'*/
       mesg = GET_MESG('PAY','PAY_RED_REG_LIMIT')
       l_log = PAY_LOG_ERROR('PAY:PAY_RED_REG_LIMIT')
       )
      If l_reduce <= l_value then
      (
        l_value = l_value - l_reduce
       )
       Else
       (
      l_reduce = l_value
      l_value = 0
      /* mesg = 'Insufficient earnings to reduce'*/
      mesg = GET_MESG('PAY','PAY_RED_REG_LIMIT')
      l_log = PAY_LOG_ERROR('PAY:PAY_RED_REG_LIMIT')
       )
          ) 
   
   )

  l_log = PAY_INTERNAL_LOG_WRITE('(GLBEARN) Derived value : '||TO_CHAR(l_value))

l_value = l_asp

IF l_asp_taxable = 0 THEN
(
    return l_srp
          ,l_value /*l_asp*/
          ,l_source_periodicity                       
)

l_source_periodicity_asp_t = l_source_periodicity

return l_srp
      ,l_value /*l_asp*/
      ,l_asp_taxable  
      ,l_source_periodicity                       
      ,l_source_periodicity_asp_t                       

            
RETURN l_value          ,
       l_hours          ,
       l_reduce         ,
       l_reduce_hours   ,
       l_reduce_abs     ,
       l_reduce_abs_hours ,
       mesg )
ELSE /* Grossup Processing  Begin */
(
l_log = PAY_INTERNAL_LOG_WRITE('(GLBGRUP) Entering GrossupMode ')
l_value = 0
 if (first_run = 1) then  
  ( result2 = new_guess   )  
  else   
 (result2 = guess + additional_amount  )   
 guess = result2   
 l_value = result2
 L_LOG = PAY_INTERNAL_LOG_WRITE('(GLBGRUP) EXITING FLAT AMOUNT FORMULA ')
 return l_value
)

/* End Formula Text */
